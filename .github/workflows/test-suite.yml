name: test-suite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MCFOST_NO_XGBOOST: yes
  MCFOST_GIT: "1"
  SKIP_HDF5: yes

jobs:
  macos:
    strategy:
      matrix:
        compiler: [gfortran, ifort]

    runs-on: macos-12
    env:
      SYSTEM: ${{ matrix.compiler }}
      HDF5_DIR: /usr/local
      MCFOST_INSTALL: /usr/local
    steps:
      - uses: actions/checkout@v2

      - name: install dependencies
        uses: ./.github/actions/dependencies/macos
        with:
          compiler: ${{ matrix.compiler }}

      - name: compile mcfost
        if: ${{ matrix.compiler == 'gfortran' }}
        working-directory: src
        run: make all

      - name: compile mcfost (intel)
        if: ${{ matrix.compiler == 'ifort' }}
        working-directory: src
        run: |
          source /opt/intel/oneapi/setvars.sh 
          make all

      - name: test
        uses: ./.github/actions/test

  linux:
    strategy:
      matrix:
        toolchain:
          - {compiler: gfortran, container: quay.io/pypa/manylinux_2_28_x86_64}
          - {compiler: ifort, container: "intel/oneapi-hpckit:2023.2-devel-ubuntu22.04"}

    runs-on: ubuntu-22.04
    container: ${{ matrix.toolchain.container }}
    env:
      SYSTEM: ${{ matrix.toolchain.compiler }}
      HDF5_DIR: /usr
      MCFOST_INSTALL: /opt/local
    steps:
      - uses: actions/checkout@v2

      - run: git config --global --add safe.directory $PWD

      - name: zlib check
        if: ${{ matrix.toolchain.compiler == 'ifort' }}
        run: |
          apt-get install zlib1g -y
          dpkg -L zlib1g
          echo "char inflateEnd ();" >> ctest.c
          echo "int main (void)" >> ctest.c
          echo "{" >> ctest.c
          echo "       return inflateEnd ();" >> ctest.c
          echo "}" >> ctest.c
          cat ctest.c
          gcc ctest.c -o testcompile -lz

      - name: cfitsio test
        if: ${{ matrix.toolchain.compiler == 'ifort' }}
        run: |
          wget -N http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-4.3.0.tar.gz
          echo "Compiling CFITSIO ..."
          tar xzvf cfitsio-4.3.0.tar.gz
          mv cfitsio-4.3.0 cfitsio
          cd cfitsio
          ./configure --enable-ssse3 --disable-curl
          
          make
          \cp libcfitsio.a ../lib
          cd ~1
          echo "Done"

      - name: build and install dependencies
        uses: ./.github/actions/dependencies/linux
        with:
          compiler: ${{ matrix.toolchain.compiler }}

      - name: compile mcfost
        working-directory: src
        run: make all

      - name: test
        uses: ./.github/actions/test
