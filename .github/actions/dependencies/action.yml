name: "dependencies"
description: "macos and linux dependencies"

# Note: needs GCC > 12, and sudo, wherever you're building
# Using gcc-11 will return a bug when compiling gas/wavelengths_gas.f90

runs:
  using: "composite"
  steps:
    # Each OS has some quirk for each compiler, so these 4 steps deal with those
    - name: install wget (GNU / linux)
      if: matrix.compiler == 'gfortran' && matrix.os == 'linux'
      shell: bash
      run: dnf install -y sudo wget epel-release

    - name: install intel compilers (intel / linux)
      if: matrix.compiler == 'ifort' && matrix.os == 'linux'
      shell: bash
      run: |
        wget -nv https://registrationcenter-download.intel.com/akdlm/IRC_NAS/ebf5d9aa-17a7-46a4-b5df-ace004227c0e/l_dpcpp-cpp-compiler_p_2023.2.1.8_offline.sh &
        wget -nv https://registrationcenter-download.intel.com/akdlm/IRC_NAS/0d65c8d4-f245-4756-80c4-6712b43cf835/l_fortran-compiler_p_2023.2.1.8_offline.sh &
        wait
        chmod +x l_dpcpp-cpp-compiler_p_2023.2.1.8_offline.sh
        ./l_dpcpp-cpp-compiler_p_2023.2.1.8_offline.sh -a --silent --eula accept
        chmod +x l_fortran-compiler_p_2023.2.1.8_offline.sh
        ./l_fortran-compiler_p_2023.2.1.8_offline.sh -a --silent --eula accept
        echo "INTEL_PATH=/home/runner/intel/oneapi" >> "$GITHUB_ENV"
        sudo chown root /bin/tar && sudo chmod u+s /bin/tar # tar needs to run as root to extract when restoring the cache

    - name: fix gcc issue on the runner (GNU / macos intel)
      if: matrix.compiler == 'gfortran' && matrix.os == 'macos-intel'
      shell: bash
      run: |
        brew reinstall gcc@13
        ln -s /usr/local/bin/gcc-13 /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-13 /usr/local/bin/g++
        ln -s /usr/local/bin/gfortran-13 /usr/local/bin/gfortran

    - name: fix gcc issue on the runner (GNU / macos arm)
      if: matrix.compiler == 'gfortran' && matrix.os == 'macos-arm'
      shell: bash
      run: |
        sudo chown -R $(whoami) /usr/local
        brew reinstall gcc@13
        ln -s /opt/homebrew/bin/gcc-13 /usr/local/bin/gcc
        ln -s /opt/homebrew/bin/g++-13 /usr/local/bin/g++
        ln -s /opt/homebrew/bin/gfortran-13 /usr/local/bin/gfortran
        export PATH=/usr/local/bin:${PATH}

    - name: install intel compilers (intel / macos)
      if: matrix.compiler == 'ifort' && matrix.os == 'macos-intel'
      shell: bash
      run: |
        wget -nv https://registrationcenter-download.intel.com/akdlm/IRC_NAS/2fbce033-15f4-4e13-8d14-f5a2016541ce/m_fortran-compiler-classic_p_2023.2.0.49001_offline.dmg &
        wget -nv https://registrationcenter-download.intel.com/akdlm/IRC_NAS/ebba13f8-1690-4d30-9d43-1e2fa2d536cd/m_cpp-compiler-classic_p_2023.2.0.48999_offline.dmg &
        wait
        hdiutil attach m_fortran-compiler-classic_p_2023.2.0.49001_offline.dmg
        sudo /Volumes/m_fortran-compiler-classic_p_2023.2.0.49001_offline/bootstrapper.app/Contents/MacOS/install.sh --silent --eula accept
        hdiutil attach m_cpp-compiler-classic_p_2023.2.0.48999_offline.dmg
        sudo /Volumes/m_cpp-compiler-classic_p_2023.2.0.48999_offline/bootstrapper.app/Contents/MacOS/install.sh --silent --eula accept
        echo "INTEL_PATH=/opt/intel/oneapi" >> "$GITHUB_ENV"

    # Cache other dependencies for mcfost to avoid downloading/installing them each time this workflow runs
    - name: cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.MCFOST_INSTALL }}/include
          ${{ env.MCFOST_INSTALL }}/lib/${{ matrix.compiler }}
        key: mcfost-TEST-deps-${{ matrix.os }}-${{ matrix.compiler }}-${{ hashFiles('lib/install.sh') }}

    - name: unset setuid bit for tar if cache not found
      if: matrix.compiler == 'ifort' && matrix.os == 'linux' && steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: sudo chmod u-s /bin/tar

    # Only do this (lengthy) setup if dependency cache not found
    - name: prepare mcfost environment
      if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
      shell: bash -e {0}
      working-directory: lib
      run: |
        [ ! "$SETVARS_COMPLETED" == 1 ] && test -f "$INTEL_PATH"/setvars.sh && . "$INTEL_PATH"/setvars.sh
        sudo chown -R $(whoami) /usr/local
        mkdir -p /usr/local/include /usr/local/lib
        chmod o+wr /usr/local/include /usr/local/lib
        ./install.sh
